package com.noithat.qlnt.backend.controller;

import com.noithat.qlnt.backend.entity.DonHang;
import com.noithat.qlnt.backend.entity.LichSuTrangThaiDonHang;
import com.noithat.qlnt.backend.service.IDonHangService;
import com.noithat.qlnt.backend.service.IQuanLyTrangThaiDonHangService;
import com.noithat.qlnt.backend.repository.DonHangRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/quan-ly-trang-thai-don-hang")
public class QuanLyTrangThaiDonHangController {

    @Autowired
    private IQuanLyTrangThaiDonHangService orderStatusService;

    @Autowired
    private DonHangRepository donHangRepository;

    // =================== ORDER STATUS MANAGEMENT ===================

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (Vietnamese URL mapping)
     * PUT /api/v1/quan-ly-trang-thai-don-hang/cap-nhat-trang-thai/{maDonHang}
     */
    @PutMapping("/cap-nhat-trang-thai/{maDonHang}")
    public ResponseEntity<Map<String, Object>> capNhatTrangThai(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> payload) {

        Map<String, Object> response = new HashMap<>();

        try {
            // H·ªó tr·ª£ nhi·ªÅu t√™n tham s·ªë
            String trangThaiMoi = (String) payload.get("trangThaiMoi");
            String nguoiCapNhat = (String) payload.get("nguoiCapNhat");
            if (nguoiCapNhat == null)
                nguoiCapNhat = (String) payload.get("nguoiThayDoi");
            String ghiChu = (String) payload.get("ghiChu");

            // Ki·ªÉm tra ƒë·∫ßu v√†o
            if (trangThaiMoi == null || trangThaiMoi.isEmpty()) {
                response.put("success", false);
                response.put("message", "Tr·∫°ng th√°i m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                return ResponseEntity.badRequest().body(response);
            }

            if (nguoiCapNhat == null || nguoiCapNhat.isEmpty()) {
                response.put("success", false);
                response.put("message", "Ng∆∞·ªùi c·∫≠p nh·∫≠t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = orderStatusService.changeOrderStatus(maDonHang, trangThaiMoi, nguoiCapNhat, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng");
                response.put("maDonHang", maDonHang);
                response.put("trangThaiMoi", trangThaiMoi);
                // include updated order entity so frontend can apply change immediately
                response.put("order", donHangRepository.findById(maDonHang).orElse(null));
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng
     * PUT /api/warehouse/order-status/{maDonHang}
     */
    @PutMapping("/{maDonHang}")
    public ResponseEntity<Map<String, Object>> changeOrderStatus(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            String trangThaiMoi = (String) request.get("trangThaiMoi");
            String nguoiThayDoi = (String) request.get("nguoiThayDoi");
            String ghiChu = (String) request.get("ghiChu");

            boolean success = orderStatusService.changeOrderStatus(maDonHang, trangThaiMoi, nguoiThayDoi, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "Thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message",
                        "Thay ƒë·ªïi tr·∫°ng th√°i th·∫•t b·∫°i - Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i ho·∫∑c thi·∫øu h√†ng t·ªìn kho");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * X√°c nh·∫≠n ƒë∆°n h√†ng (CHO_XAC_NHAN ‚Üí XAC_NHAN)
     * POST /api/warehouse/order-status/{maDonHang}/confirm
     */
    @PostMapping("/{maDonHang}/confirm")
    public ResponseEntity<Map<String, Object>> confirmOrder(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            // Log incoming payload for diagnostics
            String nguoiThayDoi = (String) request.get("nguoiThayDoi");
            String ghiChu = (String) request.getOrDefault("ghiChu", "X√°c nh·∫≠n ƒë∆°n h√†ng");

            // üîπ Validation: Check if nguoiThayDoi is provided
            if (nguoiThayDoi == null || nguoiThayDoi.trim().isEmpty()) {
                response.put("success", false);
                response.put("message", "Thi·∫øu th√¥ng tin ng∆∞·ªùi thay ƒë·ªïi");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = orderStatusService.changeOrderStatus(maDonHang,
                    IQuanLyTrangThaiDonHangService.XAC_NHAN, nguoiThayDoi, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng - ƒê√£ ƒë·∫∑t tr∆∞·ªõc h√†ng");
                response.put("order", donHangRepository.findById(maDonHang).orElse(null));
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "X√°c nh·∫≠n ƒë∆°n h√†ng th·∫•t b·∫°i - Kh√¥ng ƒë·ªß h√†ng t·ªìn kho");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Chu·∫©n b·ªã ƒë∆°n h√†ng (XAC_NHAN ‚Üí DANG_CHUAN_BI)
     * POST /api/warehouse/order-status/{maDonHang}/prepare
     */
    @PostMapping("/{maDonHang}/prepare")
    public ResponseEntity<Map<String, Object>> prepareOrder(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            // Log incoming payload for diagnostics
            String nguoiThayDoi = (String) request.get("nguoiThayDoi");
            String ghiChu = (String) request.getOrDefault("ghiChu", "B·∫Øt ƒë·∫ßu chu·∫©n b·ªã ƒë∆°n h√†ng");

            if (nguoiThayDoi == null || nguoiThayDoi.trim().isEmpty()) {
                response.put("success", false);
                response.put("message", "Thi·∫øu th√¥ng tin ng∆∞·ªùi thay ƒë·ªïi");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = orderStatusService.changeOrderStatus(maDonHang,
                    IQuanLyTrangThaiDonHangService.DANG_CHUAN_BI, nguoiThayDoi, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "B·∫Øt ƒë·∫ßu chu·∫©n b·ªã ƒë∆°n h√†ng th√†nh c√¥ng");
                response.put("order", donHangRepository.findById(maDonHang).orElse(null));
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Kh√¥ng th·ªÉ chu·∫©n b·ªã ƒë∆°n h√†ng");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Giao h√†ng (DANG_CHUAN_BI ‚Üí DANG_GIAO)
     * POST /api/warehouse/order-status/{maDonHang}/ship
     */
    @PostMapping("/{maDonHang}/ship")
    public ResponseEntity<Map<String, Object>> shipOrder(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            // Log incoming payload for diagnostics
            String nguoiThayDoi = (String) request.get("nguoiThayDoi");
            String ghiChu = (String) request.getOrDefault("ghiChu", "B·∫Øt ƒë·∫ßu giao h√†ng");

            if (nguoiThayDoi == null || nguoiThayDoi.trim().isEmpty()) {
                response.put("success", false);
                response.put("message", "Thi·∫øu th√¥ng tin ng∆∞·ªùi thay ƒë·ªïi");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = orderStatusService.changeOrderStatus(maDonHang,
                    IQuanLyTrangThaiDonHangService.DANG_GIAO_HANG, nguoiThayDoi, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "B·∫Øt ƒë·∫ßu giao h√†ng th√†nh c√¥ng");
                response.put("order", donHangRepository.findById(maDonHang).orElse(null));
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu giao h√†ng");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Ho√†n th√†nh ƒë∆°n h√†ng (DANG_GIAO ‚Üí HOAN_THANH)
     * POST /api/warehouse/order-status/{maDonHang}/complete
     */
    @PostMapping("/{maDonHang}/complete")
    public ResponseEntity<Map<String, Object>> completeOrder(
            @PathVariable Integer maDonHang,
            @RequestBody(required = false) Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            // Log incoming payload for diagnostics (optional payload)

            orderStatusService.capNhatTrangThai(maDonHang,
                    IQuanLyTrangThaiDonHangService.HOAN_THANH,
                    request != null ? (String) request.get("nguoiThayDoi") : "H·ªá th·ªëng",
                    request != null
                            ? (String) request.getOrDefault("ghiChu",
                                    "Ho√†n th√†nh ƒë∆°n h√†ng c·ªßa " + request.get("maKhachHang"))
                            : "Ho√†n th√†nh ƒë∆°n h√†ng");

            response.put("success", true);
            response.put("message", "Ho√†n th√†nh ƒë∆°n h√†ng th√†nh c√¥ng");
            response.put("order", donHangRepository.findById(maDonHang).orElse(null));
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * H·ªßy ƒë∆°n h√†ng (‚Üí HUY_BO)
     * POST /api/warehouse/order-status/{maDonHang}/cancel
     */
    @PostMapping("/{maDonHang}/cancel")
    public ResponseEntity<Map<String, Object>> cancelOrder(
            @PathVariable Integer maDonHang,
            @RequestBody Map<String, Object> request) {

        Map<String, Object> response = new HashMap<>();

        try {
            // Log incoming payload for diagnostics
            String nguoiThayDoi = (String) request.get("nguoiThayDoi");
            String ghiChu = (String) request.getOrDefault("ghiChu", "H·ªßy ƒë∆°n h√†ng");

            if (nguoiThayDoi == null || nguoiThayDoi.trim().isEmpty()) {
                response.put("success", false);
                response.put("message", "Thi·∫øu th√¥ng tin ng∆∞·ªùi thay ƒë·ªïi");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = orderStatusService.changeOrderStatus(maDonHang,
                    IQuanLyTrangThaiDonHangService.HUY_BO, nguoiThayDoi, ghiChu);

            if (success) {
                response.put("success", true);
                response.put("message", "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng - ƒê√£ h·ªßy ƒë·∫∑t tr∆∞·ªõc");
                response.put("order", donHangRepository.findById(maDonHang).orElse(null));
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // =================== QUERY OPERATIONS ===================

    /**
     * L·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng
     * GET /api/v1/quan-ly-trang-thai-don-hang/lich-su-trang-thai/{maDonHang}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/lich-su-trang-thai/{maDonHang}")
    public ResponseEntity<Map<String, Object>> getOrderStatusHistory(@PathVariable Integer maDonHang) {
        Map<String, Object> response = new HashMap<>();
        try {
            List<LichSuTrangThaiDonHang> history = orderStatusService.getOrderStatusHistory(maDonHang);
            response.put("success", true);
            response.put("data", history);
            response.put("count", history.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng theo tr·∫°ng th√°i
     * GET
     * /api/v1/quan-ly-trang-thai-don-hang/don-hang-theo-trang-thai?trangThai=...
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n v√† ki·ªÉu tham s·ªë @PathVariable -> @RequestParam
    @GetMapping("/don-hang-theo-trang-thai")
    public ResponseEntity<Map<String, Object>> getOrdersByStatus(@RequestParam(name = "trangThai") String trangThai) {
        Map<String, Object> response = new HashMap<>();
        try {
            List<DonHang> orders = orderStatusService.getOrdersByStatus(trangThai);
            response.put("success", true);
            response.put("data", orders);
            response.put("count", orders.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng c·∫ßn x·ª≠ l√Ω
     * GET /api/v1/quan-ly-trang-thai-don-hang/don-hang-cho-xu-ly
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/don-hang-cho-xu-ly")
    public ResponseEntity<Map<String, Object>> getPendingOrders() {
        Map<String, Object> response = new HashMap<>();
        try {
            List<DonHang> orders = orderStatusService.getPendingOrders();
            response.put("success", true);
            response.put("data", orders);
            response.put("count", orders.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang giao
     * GET /api/v1/quan-ly-trang-thai-don-hang/don-hang-dang-giao
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/don-hang-dang-giao")
    public ResponseEntity<Map<String, Object>> getShippingOrders() {
        Map<String, Object> response = new HashMap<>();
        try {
            List<DonHang> orders = orderStatusService.getShippingOrders();
            response.put("success", true);
            response.put("data", orders);
            response.put("count", orders.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * [M·ªöI] L·∫•y danh s√°ch ƒë∆°n h√†ng c·∫ßn ch√∫ √Ω
     * GET /api/v1/quan-ly-trang-thai-don-hang/don-hang-can-chu-y
     */
    @GetMapping("/don-hang-can-chu-y")
    public ResponseEntity<Map<String, Object>> getOrdersNeedingAttention() {
        Map<String, Object> response = new HashMap<>();
        try {
            // L∆ØU √ù: B·∫°n c·∫ßn t·∫°o ph∆∞∆°ng th·ª©c `getOrdersNeedingAttention` trong Service
            List<DonHang> orders = orderStatusService.getOrdersNeedingAttention();
            response.put("success", true);
            response.put("data", orders);
            response.put("count", orders.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Th·ªëng k√™ th·ªùi gian x·ª≠ l√Ω ƒë∆°n h√†ng
     * GET /api/v1/quan-ly-trang-thai-don-hang/thong-ke-thoi-gian-xu-ly
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/thong-ke-thoi-gian-xu-ly")
    public ResponseEntity<Map<String, Object>> getProcessingTimeStats() {
        Map<String, Object> response = new HashMap<>();
        try {
            List<Object[]> stats = orderStatusService.getProcessingTimeStats();
            response.put("success", true);
            response.put("data", stats);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }
}